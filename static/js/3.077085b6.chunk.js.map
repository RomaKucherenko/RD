{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/Message/Message.jsx","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/AddMessageForm.js","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","Message","props","className","s","side","src","message","DialogItem","path","id","activeClassName","active","to","name","AddMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","placeholder","Dialogs","dialogsElements","dialogsPage","dialogs","map","dialog","sideSelector","index","right","left","messagesElements","messages","DialogsItems","Messages","data","addMessage","addMessageText","DialogsCompose","compose","connect","state","dispatch","newMessageText","addNewMessageCreator","WithAuthRedirect"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,SAAW,0BAA0B,aAAe,8BAA8B,WAAa,4BAA4B,OAAS,wBAAwB,QAAU,yBAAyB,KAAO,sBAAsB,MAAQ,yB,uFCY1QC,EATC,SAACC,GACb,OACI,yBAAKC,UAAS,UAAKC,IAAEH,QAAP,YAAkBC,EAAMG,OAClC,yBAAKC,IAAKJ,EAAMI,MACfJ,EAAMK,U,QCUJC,EAdI,SAACN,GAChB,IAAIO,EAAO,YAAcP,EAAMQ,GAC/B,OACI,yBAAKP,UAAWC,IAAEI,YACd,yBAAKF,IAAKJ,EAAMI,MAGhB,kBAAC,IAAD,CAASK,gBAAiBP,IAAEQ,OAAQC,GAAIJ,GAAOP,EAAMY,Q,kBCOlDC,EAJaC,YAAU,CAClCC,KAAK,UADmBD,EAXL,SAACd,GACpB,OAAO,0BAAMgB,SAAUhB,EAAMiB,cACrB,6BACI,kBAACC,EAAA,EAAD,CAAOC,UAAU,WAAWC,YAAY,kFAAiBR,KAAK,oBAElE,6BACI,qDC+BDS,EAlCC,SAACrB,GAGb,IAAIsB,EAAkBtB,EAAMuB,YAAYC,QAAQC,KAC5C,SAAAC,GAAM,OAAI,kBAAC,EAAD,CAAYd,KAAMc,EAAOd,KAAMR,IAAKsB,EAAOnB,KAC/BC,GAAIkB,EAAOlB,QAE/BmB,EAAe,SAACC,EAAOC,EAAOC,GAChC,OAAOF,EAAQ,EAAIC,EAAQC,GAE3BC,EAAmB/B,EAAMuB,YAAYS,SAASP,KAC9C,SAACpB,EAASuB,GAAV,OAAoB,kBAAC,EAAD,CAChBvB,QAASA,EAAQA,QAASG,GAAIH,EAAQG,GACtCL,KAAMwB,EAAaC,EAAO1B,IAAE2B,MAAO3B,IAAE4B,MAAO1B,IAAKC,EAAQE,UAMjE,OACI,yBAAKN,UAAWC,IAAEmB,SACd,yBAAKpB,UAAWC,IAAE+B,cACbX,GAEL,yBAAKrB,UAAWC,IAAEgC,UACd,6BAAMH,GACN,6BACG,kBAAC,EAAD,CAAqBf,SAXjB,SAACmB,GAChBnC,EAAMoC,WAAWD,EAAKE,uB,wBCQ1BC,EAAiBC,YACjBC,aAxBkB,SAACC,GAEnB,MAAO,CACHlB,YAAakB,EAAMlB,gBAKF,SAACmB,GAEtB,MAAO,CACHN,WAAY,SAACO,GACTD,EAASE,YAAqBD,SAatCE,IAFiBN,CAGnBlB,GAEaiB","file":"static/js/3.077085b6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Dialogs\":\"Dialogs_Dialogs__3Uaqm\",\"Messages\":\"Dialogs_Messages__ozOo5\",\"DialogsItems\":\"Dialogs_DialogsItems__2ybxi\",\"DialogItem\":\"Dialogs_DialogItem__1dvRE\",\"active\":\"Dialogs_active__2FMbc\",\"Message\":\"Dialogs_Message__CJobJ\",\"left\":\"Dialogs_left__OJ4KV\",\"right\":\"Dialogs_right__peWh5\"};","import React from 'react'\r\nimport s from '../Dialogs.module.css'\r\n\r\n\r\nconst Message = (props) => {\r\n    return (\r\n        <div className={`${s.Message} ${props.side}`}>\r\n            <img src={props.src}/>\r\n            {props.message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message\r\n","import React from 'react'\r\nimport s from '../Dialogs.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n    let path = \"/Dialogs/\" + props.id\r\n    return (\r\n        <div className={s.DialogItem}>\r\n            <img src={props.src}/>\r\n            {/*Мы здесь используем NavLink для того чтобы смена URL'a происходила без*/}\r\n            {/*перезагрузки страницы*/}\r\n            <NavLink activeClassName={s.active} to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default DialogItem\r\n","import React from \"react\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\n\r\nconst addMessageForm = (props) => {\r\n    return <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component=\"textarea\" placeholder=\"Ваше сообщение\" name=\"addMessageText\"/>\r\n            </div>\r\n            <div>\r\n                <button>Send Message</button>\r\n            </div>\r\n        </form>\r\n}\r\n\r\nconst AddMessageReduxForm = reduxForm({\r\n    form:\"dialog\"\r\n})(addMessageForm)\r\n\r\nexport default AddMessageReduxForm","import React from 'react'\r\nimport s from './Dialogs.module.css'\r\nimport Message from \"./Message/Message\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport AddMessageReduxForm from \"./AddMessageForm\";\r\n\r\nconst Dialogs = (props) => {\r\n    /*Т.Е. Я для каждого элемента массива диалогов должен создать компоненту и в пропсы закинуть свойство\r\n    * из этого массива*/\r\n    let dialogsElements = props.dialogsPage.dialogs.map(\r\n        dialog => <DialogItem name={dialog.name} src={dialog.path}\r\n                              id={dialog.id}/>\r\n    )\r\n    const sideSelector = (index, right, left) => {\r\n        return index % 2 ? right : left\r\n    }\r\n    let messagesElements = props.dialogsPage.messages.map(\r\n        (message, index) => <Message\r\n            message={message.message} id={message.id}\r\n            side={sideSelector(index, s.right, s.left)} src={message.path}\r\n        />\r\n    )\r\n    const addMessage = (data) => {\r\n        props.addMessage(data.addMessageText)\r\n    }\r\n    return (\r\n        <div className={s.Dialogs}>\r\n            <div className={s.DialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.Messages}>\r\n                <div>{messagesElements}</div>\r\n                <div>\r\n                   <AddMessageReduxForm onSubmit={addMessage} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs\r\n","import React from 'react'\r\nimport {addNewMessageCreator} from \"../../Redux/dialogsReducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport WithAuthRedirect from \"../Hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    //Внутри connect'a принимает state\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n        //connect смотрит изменилась ли ссылка на obj\r\n    }\r\n\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n    //Внутри connect'a принимает dispatch'и.bind(store)\r\n    return {\r\n        addMessage: (newMessageText) => {\r\n            dispatch(addNewMessageCreator(newMessageText))\r\n        }\r\n    }\r\n}\r\n//В первый вызов connect передаётся две функции и всё что они вернут\r\n//попадёт в ! props !\r\n//Во второй вызов передаем компоненту, которую хотим обернуть в контейнер\r\n//Раньше у нас было вот так\r\n// let withAuthDialogs = WithAuthRedirect(Dialogs)\r\n// const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(withAuthDialogs)\r\n\r\nlet DialogsCompose = compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    WithAuthRedirect\r\n)(Dialogs)\r\n\r\nexport default DialogsCompose\r\n"],"sourceRoot":""}